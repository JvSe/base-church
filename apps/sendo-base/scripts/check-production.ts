#!/usr/bin/env tsx

/**
 * Script de verifica√ß√£o para produ√ß√£o
 * Executa todas as valida√ß√µes necess√°rias antes do deploy
 */

import { validateDatabaseConnection } from "@repo/db";
import { validateEnvironment } from "../src/lib/config/env";

async function checkProduction() {
  console.log("üîç Verificando configura√ß√£o para produ√ß√£o...\n");

  try {
    // 1. Verificar vari√°veis de ambiente
    console.log("1Ô∏è‚É£ Verificando vari√°veis de ambiente...");
    validateEnvironment();
    console.log("‚úÖ Vari√°veis de ambiente OK\n");

    // 2. Verificar conex√£o com banco
    console.log("2Ô∏è‚É£ Verificando conex√£o com banco de dados...");
    const { prisma } = await import("@repo/db");
    const isConnected = await validateDatabaseConnection(prisma);

    if (isConnected) {
      console.log("‚úÖ Conex√£o com banco OK\n");
    } else {
      throw new Error("‚ùå Falha na conex√£o com banco de dados");
    }

    // 3. Verificar configura√ß√£o de ambiente
    console.log("3Ô∏è‚É£ Verificando configura√ß√£o de ambiente...");
    const nodeEnv = process.env.NODE_ENV;
    console.log(`üìä NODE_ENV: ${nodeEnv}`);

    if (nodeEnv !== "production") {
      console.log("‚ö†Ô∏è  NODE_ENV n√£o est√° definido como 'production'");
    } else {
      console.log("‚úÖ Ambiente configurado para produ√ß√£o\n");
    }

    // 4. Resumo final
    console.log("üéâ Todas as verifica√ß√µes passaram!");
    console.log("üöÄ Sistema pronto para produ√ß√£o");

    process.exit(0);
  } catch (error) {
    console.error("‚ùå Verifica√ß√£o falhou:", error);
    console.log("\nüîß Verifique:");
    console.log("- Vari√°veis de ambiente configuradas");
    console.log("- Conex√£o com banco de dados");
    console.log("- Credenciais corretas");

    process.exit(1);
  }
}

checkProduction();
