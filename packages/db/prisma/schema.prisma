generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MEMBROS
  LIDER
  ADMIN
}

enum CourseCategory {
  CREATIVITY
  PROVISION
  MULTIPLICATION
}

enum CertificateStatus {
  PENDING // Certificado criado mas não emitido
  ISSUED // Certificado emitido para o usuário
  REVOKED // Certificado revogado
}

enum UserApprovalStatus {
  PENDING // Usuário aguardando aprovação
  APPROVED // Usuário aprovado
  REJECTED // Usuário rejeitado
}

enum LessonType {
  VIDEO // Lição em vídeo
  TEXT // Lição de texto/leitura
  OBJECTIVE_QUIZ // Quiz com questões objetivas (múltipla escolha)
  SUBJECTIVE_QUIZ // Quiz com questões subjetivas (texto ou arquivo)
}

enum QuestionType {
  OBJECTIVE // Questão de múltipla escolha
  SUBJECTIVE // Questão dissertativa
}

enum SubjectiveAnswerType {
  TEXT // Resposta em texto
  FILE // Resposta por upload de arquivo
}

enum AnswerStatus {
  PENDING // Aguardando correção
  APPROVED // Resposta aprovada/correta
  REJECTED // Resposta rejeitada/incorreta
  NEEDS_REVISION // Precisa de revisão
}

model User {
  id                   String             @id @default(uuid())
  name                 String?
  email                String?            @unique
  emailVerified        DateTime?
  image                String?
  username             String?            @unique
  role                 UserRole           @default(MEMBROS)
  isPastor             Boolean            @default(false)
  bio                  String?
  phone                String?
  cpf                  String?            @unique
  password             String?
  birthDate            DateTime?
  joinDate             DateTime           @default(now())
  profileCompletion    Int?               @default(0)
  currentStreak        Int?               @default(0)
  totalPoints          Int?               @default(0)
  level                Int?               @default(1)
  experience           Int?               @default(0)
  notificationSettings Json? // JSON object for notification preferences
  approvalStatus       UserApprovalStatus @default(PENDING) // Status de aprovação do usuário
  approvedAt           DateTime? // Data da aprovação
  approvedBy           String? // ID do líder/pastor que aprovou
  rejectionReason      String? // Motivo da rejeição se aplicável

  // Invite/Activation fields
  inviteToken          String?   @unique // Token único para completar cadastro
  inviteTokenExpiresAt DateTime? // Data de expiração do token
  isInvitePending      Boolean   @default(false) // Se true, usuário precisa completar cadastro

  // Address fields
  cep          String? // CEP (postal code)
  street       String? // Logradouro (street name)
  number       String? // Número (house number)
  complement   String? // Complemento (complement)
  neighborhood String? // Bairro (neighborhood)
  city         String? // Cidade (city)
  state        String? // Estado (state)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments         Enrollment[]
  progress            LessonProgress[]
  certificates        Certificate[]
  subscriptions       Subscription[]
  notifications       Notification[]
  forumPosts          ForumPost[]
  forumComments       ForumComment[]
  forumPostLikes      ForumPostLike[]
  forumPostViews      ForumPostView[]
  eventEnrollments    EventEnrollment[]
  eventReviews        EventReview[]
  courseReviews       CourseReview[]
  achievements        UserAchievement[]
  stats               UserStats?
  goal                UserGoal?
  instructorCourses   Course[]          @relation("CourseInstructor")
  instructorEvents    Event[]           @relation("EventInstructor")
  approvedEnrollments Enrollment[]      @relation("EnrollmentApprover")
  studentAnswers      StudentAnswer[] // Respostas do aluno às questões

  @@map("users")
}

model Course {
  id              String   @id @default(uuid())
  title           String
  description     String?
  longDescription String?
  slug            String   @unique
  image           String?
  duration        Int? // in minutes
  level           String? // beginner, intermediate, advanced
  category        String?
  instructorId    String?
  price           Float?   @default(0)
  rating          Float?   @default(0)
  reviewsCount    Int?     @default(0)
  studentsCount   Int?     @default(0)
  totalLessons    Int?     @default(0)
  isFeatured      Boolean  @default(false)
  isPublished     Boolean  @default(false)
  certificate     Boolean  @default(false)
  tags            String[] // Array of tags
  objectives      String[] // Array of learning objectives
  requirements    String[] // Array of requirements
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  instructor          User?                @relation("CourseInstructor", fields: [instructorId], references: [id])
  modules             Module[]
  enrollments         Enrollment[]
  certificates        Certificate[]
  certificateTemplate CertificateTemplate?
  reviews             CourseReview[]

  @@map("courses")
}

model Module {
  id                         String   @id @default(uuid())
  title                      String
  description                String?
  order                      Int
  courseId                   String
  requiresActivityCompletion Boolean  @default(false) // Se true, módulo só é liberado após atividade do módulo anterior
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id             String     @id @default(uuid())
  title          String
  description    String?
  content        String? // Conteúdo para lições de texto
  videoUrl       String?
  youtubeEmbedId String?
  duration       Int? // in minutes
  order          Int
  moduleId       String
  type           LessonType @default(VIDEO) // Tipo da lição
  isActivity     Boolean    @default(false) // Se true, é uma atividade que bloqueia o próximo módulo
  isPublished    Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  module    Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress  LessonProgress[]
  questions Question[] // Questões da atividade (se for quiz)

  @@map("lessons")
}

model Enrollment {
  id               String    @id @default(uuid())
  userId           String
  courseId         String
  enrolledAt       DateTime  @default(now())
  completedAt      DateTime?
  lastAccessedAt   DateTime?
  progress         Float?    @default(0) // 0-100
  completedLessons Int?      @default(0)
  isActive         Boolean   @default(true)
  status           String    @default("pending") // pending, approved, rejected
  approvedAt       DateTime?
  approvedBy       String? // ID do líder/pastor que aprovou
  rejectionReason  String? // Motivo da rejeição se aplicável

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  approver User?  @relation("EnrollmentApprover", fields: [approvedBy], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id          String    @id @default(uuid())
  userId      String
  lessonId    String
  isCompleted Boolean   @default(false)
  watchedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progresses")
}

// Template de certificado - criado quando o curso é criado
model CertificateTemplate {
  id          String   @id @default(uuid())
  courseId    String   @unique // Um curso tem apenas um template de certificado
  title       String
  description String?
  templateUrl String? // URL do template PNG
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  certificates Certificate[] // Certificados emitidos baseados neste template

  @@map("certificate_templates")
}

// Certificado emitido - criado quando usuário completa o curso
model Certificate {
  id               String            @id @default(uuid())
  userId           String? // Nullable - só preenchido quando emitido
  courseId         String
  templateId       String
  status           CertificateStatus @default(PENDING)
  issuedAt         DateTime? // Nullable - só preenchido quando emitido
  certificateUrl   String? // URL do certificado gerado (PNG)
  verificationCode String?           @unique // Código único para verificação
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  user     User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  template CertificateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  plan      String // basic, pro, enterprise
  status    String // active, cancelled, expired
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String // info, success, warning, error
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Event {
  id                 String    @id @default(uuid())
  title              String
  description        String?
  longDescription    String?
  image              String?
  startDate          DateTime
  endDate            DateTime?
  location           String?
  isOnline           Boolean   @default(false)
  maxAttendees       Int?
  currentAttendees   Int?      @default(0)
  price              Float?    @default(0)
  category           String?
  language           String?   @default("Português")
  instructorId       String?
  isFeatured         Boolean   @default(false)
  isLive             Boolean   @default(false)
  certificate        Boolean   @default(false)
  recordingAvailable Boolean   @default(false)
  rating             Float?    @default(0)
  reviewsCount       Int?      @default(0)
  tags               String[] // Array of tags
  requirements       String[] // Array of requirements
  whatYouWillLearn   String[] // Array of learning outcomes
  materials          String[] // Array of materials
  isPublished        Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  instructor  User?             @relation("EventInstructor", fields: [instructorId], references: [id])
  enrollments EventEnrollment[]
  speakers    EventSpeaker[]
  agenda      EventAgenda[]
  reviews     EventReview[]

  @@map("events")
}

model ForumPost {
  id          String   @id @default(uuid())
  userId      String
  title       String
  content     String
  category    String?
  isPublished Boolean  @default(true)
  likesCount  Int      @default(0) // Cache do total de likes
  viewsCount  Int      @default(0) // Cache do total de views
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments ForumComment[]
  likes    ForumPostLike[]
  views    ForumPostView[]

  @@map("forum_posts")
}

model ForumComment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

model ForumPostLike {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Um usuário só pode curtir uma vez
  @@map("forum_post_likes")
}

model ForumPostView {
  id       String   @id @default(uuid())
  userId   String
  postId   String
  viewedAt DateTime @default(now())

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Um usuário só é contado uma vez
  @@map("forum_post_views")
}

// New models for the complete prototype

model EventEnrollment {
  id         String   @id @default(uuid())
  userId     String
  eventId    String
  enrolledAt DateTime @default(now())
  attended   Boolean? @default(false)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_enrollments")
}

model EventSpeaker {
  id         String  @id @default(uuid())
  eventId    String
  name       String
  role       String?
  experience String?
  bio        String?
  avatar     String?
  social     Json? // JSON object for social links

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_speakers")
}

model EventAgenda {
  id          String  @id @default(uuid())
  eventId     String
  time        String
  duration    Int // in minutes
  title       String
  description String?
  speaker     String?
  order       Int

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_agenda")
}

model EventReview {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_reviews")
}

model CourseReview {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_reviews")
}

model Achievement {
  id          String   @id @default(uuid())
  name        String
  description String?
  icon        String?
  type        String? // milestone, streak, completion, points
  requirement Int? // points required, courses completed, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Int?     @default(0) // for progressive achievements

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserStats {
  id                 String    @id @default(uuid())
  userId             String    @unique
  coursesCompleted   Int       @default(0)
  certificatesEarned Int       @default(0)
  studentsImpacted   Int       @default(0)
  hoursStudied       Int       @default(0)
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  totalPoints        Int       @default(0)
  level              Int       @default(1)
  experience         Int       @default(0)
  lastActivityAt     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model UserGoal {
  id                   String   @id @default(uuid())
  userId               String   @unique
  dailyStudyHours      Float    @default(1) // Horas por dia
  monthlyCoursesTarget Int      @default(1) // Cursos por mês
  weeklyStudyHours     Float    @default(5) // Calculado: dailyStudyHours * 7
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_goals")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())

  @@map("tags")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("categories")
}

// Questões das atividades (quizzes)
model Question {
  id                   String                @id @default(uuid())
  lessonId             String
  type                 QuestionType // Objetiva ou subjetiva
  questionText         String // Texto da pergunta
  points               Int                   @default(10) // Pontuação da questão
  order                Int // Ordem da questão na atividade
  explanation          String? // Explicação da resposta (opcional)
  subjectiveAnswerType SubjectiveAnswerType? // TEXT ou FILE (apenas para questões subjetivas)
  correctAnswer        String? // Resposta correta para questões subjetivas (para comparação)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relations
  lesson  Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options QuestionOption[] // Opções de resposta (apenas para questões objetivas)
  answers StudentAnswer[] // Respostas dos alunos

  @@map("questions")
}

// Opções de resposta para questões objetivas
model QuestionOption {
  id         String   @id @default(uuid())
  questionId String
  optionText String // Texto da opção
  isCorrect  Boolean  @default(false) // Se é a resposta correta
  order      Int // Ordem da opção
  createdAt  DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_options")
}

// Respostas dos alunos às questões
model StudentAnswer {
  id               String       @id @default(uuid())
  userId           String
  questionId       String
  lessonId         String // Para facilitar consultas
  answerText       String? // Resposta em texto (para subjetivas ou objetivas)
  selectedOptionId String? // ID da opção selecionada (para objetivas)
  fileUrl          String? // URL do arquivo enviado (para subjetivas com arquivo)
  status           AnswerStatus @default(PENDING) // Status da correção
  score            Int?         @default(0) // Pontuação obtida
  feedback         String? // Feedback do corretor (para subjetivas)
  correctedBy      String? // ID do usuário que corrigiu (para subjetivas)
  correctedAt      DateTime? // Data da correção
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId]) // Um aluno só pode responder cada questão uma vez
  @@map("student_answers")
}

// ============================================================================
// HELP SYSTEM MODELS
// ============================================================================

// Categorias de FAQ
model HelpCategory {
  id          String   @id @default(uuid())
  title       String
  description String?
  icon        String // Nome do ícone Lucide
  color       String // Classe de cor
  bgColor     String // Classe de cor de fundo
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions HelpQuestion[]

  @@map("help_categories")
}

// Perguntas do FAQ
model HelpQuestion {
  id         String   @id @default(uuid())
  categoryId String
  question   String
  answer     String?  @db.Text // Resposta detalhada (opcional)
  order      Int      @default(0)
  isActive   Boolean  @default(true)
  views      Int      @default(0)
  helpful    Int      @default(0) // Contador de "foi útil"
  notHelpful Int      @default(0) // Contador de "não foi útil"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category HelpCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("help_questions")
}

// Artigos de ajuda populares
model HelpArticle {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  category    String
  excerpt     String?
  views       Int      @default(0)
  helpful     Int      @default(0) // Porcentagem de útil (0-100)
  isPublished Boolean  @default(true)
  isFeatured  Boolean  @default(false) // Artigo popular
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  feedbacks    HelpArticleFeedback[]
  articleViews HelpArticleView[]

  @@map("help_articles")
}

// Feedback de artigos (rastreia votos únicos)
model HelpArticleFeedback {
  id        String   @id @default(uuid())
  articleId String
  userId    String
  isHelpful Boolean // true = útil, false = não útil
  createdAt DateTime @default(now())

  // Relations
  article HelpArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId]) // Um usuário só pode votar uma vez por artigo
  @@map("help_article_feedbacks")
}

// Visualizações de artigos (rastreia views únicos)
model HelpArticleView {
  id        String   @id @default(uuid())
  articleId String
  userId    String
  viewedAt  DateTime @default(now())

  // Relations
  article HelpArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId]) // Um usuário só é contado uma vez
  @@map("help_article_views")
}

// Opções de suporte
model SupportOption {
  id           String   @id @default(uuid())
  title        String
  description  String
  icon         String // Nome do ícone Lucide
  action       String // Texto do botão ou ação
  contactInfo  String? // Email, telefone, URL, etc
  responseTime String // Tempo de resposta estimado
  isAvailable  Boolean  @default(true)
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("support_options")
}
