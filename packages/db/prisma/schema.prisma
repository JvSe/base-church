// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  username           String?   @unique
  role               String?   @default("student")
  bio                String?
  location           String?
  skills             String?
  academicBackground String?
  highlights         String?
  joinDate           DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  progress      LessonProgress[]
  certificates  Certificate[]
  subscriptions Subscription[]
  notifications Notification[]
  forumPosts    ForumPost[]
  forumComments ForumComment[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  image       String?
  duration    Int? // in minutes
  level       String? // beginner, intermediate, advanced
  category    String?
  instructor  String?
  price       Float?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modules      Module[]
  enrollments  Enrollment[]
  certificates Certificate[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int? // in minutes
  order       Int
  moduleId    String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module   Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress LessonProgress[]
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  isActive    Boolean   @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  isCompleted Boolean   @default(false)
  watchedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  courseId       String
  issuedAt       DateTime @default(now())
  certificateUrl String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  plan      String // basic, pro, enterprise
  status    String // active, cancelled, expired
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String // info, success, warning, error
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id           String    @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  location     String?
  isOnline     Boolean   @default(false)
  maxAttendees Int?
  isPublished  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ForumPost {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  category    String?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments ForumComment[]
}

model ForumComment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}
